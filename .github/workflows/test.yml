# !!! This file is auto-generated, do not edit by hand !!!
# To make changes, edit .github/workflows-src/test.ts and then run:
#
#   github-actions-workflow-builder --directory ".github/workflows-src""

name: Test
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 12.x
          - 14.x
          - 16.x
          - 18.x
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org
      - name: Enable Cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('package.json',
            'yarn.lock') }}
          path: node_modules
        id: step_3
      - if: ${{ steps.step_3.outputs.cache-hit != 'true' }}
        run: yarn install --frozen-lockfile
      - run: yarn build
      - name: Print node.js version
        run: echo "node version = ${{ matrix.node-version }}"
      - name: Print using nested interpolation
        run: echo "node version = ${{ matrix.node-version }}"
      - name: Dump github_event context
        run: echo $GITHUB_EVENT_CONTEXT
        env:
          GITHUB_EVENT_CONTEXT: ${{ toJSON(github.event) }}
      - name: Dump job context
        run: echo $JOB_CONTEXT
        env:
          JOB_CONTEXT: ${{ toJSON(job) }}
      - name: Dump steps context
        run: echo $STEPS_CONTEXT
        env:
          STEPS_CONTEXT: ${{ toJSON(steps) }}
      - name: Dump runner context
        run: echo $RUNNER_CONTEXT
        env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
      - name: Dump strategy context
        run: echo $STRATEGY_CONTEXT
        env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
      - name: Dump matrix context
        run: echo $MATRIX_CONTEXT
        env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
      - name: Success
        if: ${{ success() }}
        run: echo sucess
      - name: Failed
        if: ${{ failure() }}
        run: echo failed
      - name: Always
        if: ${{ always() }}
        run: echo always
      - if: ${{ github.event_name == 'push' }}
        run: npx rollingversions publish --dry-run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  test_outputs:
    runs-on: ubuntu-latest
    steps:
      - name: String Outputs
        run: echo "::set-output name=true_output::true" && echo "::set-output
          name=false_output::false"
        id: step_1
      - name: JSON Outputs
        run: echo "::set-output name=true_output::true" && echo "::set-output
          name=false_output::false"
        id: step_2
    outputs:
      amazingString: ${{ toJSON('{{ something something }}') }}
      stringTrue: ${{ toJSON('true') }}
      stringFalse: ${{ toJSON('false') }}
      booleanTrue: ${{ toJSON('true' == 'true') }}
      booleanFalse: ${{ toJSON('false' == 'true') }}
      stringCmdTrue: ${{ toJSON(steps.step_1.outputs.true_output) }}
      stringCmdFalse: ${{ toJSON(steps.step_1.outputs.false_output) }}
      booleanCmdTrue: ${{ steps.step_2.outputs.true_output }}
      booleanCmdFalse: ${{ steps.step_2.outputs.false_output }}
  test_needs:
    needs:
      - test_outputs
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ fromJSON(needs.test_outputs.outputs.amazingString) }}"
      - if: ${{ fromJSON(needs.test_outputs.outputs.stringTrue) }}
        run: echo "string true"
      - if: ${{ fromJSON(needs.test_outputs.outputs.stringFalse) }}
        run: echo "string false"
      - if: ${{ fromJSON(needs.test_outputs.outputs.booleanTrue) }}
        run: echo "boolean true"
      - if: ${{ fromJSON(needs.test_outputs.outputs.booleanFalse) }}
        run: echo "boolean false"
      - if: ${{ fromJSON(needs.test_outputs.outputs.stringCmdTrue) }}
        run: echo "string cmd true"
      - if: ${{ fromJSON(needs.test_outputs.outputs.stringCmdFalse) }}
        run: echo "string cmd false"
      - if: ${{ fromJSON(needs.test_outputs.outputs.booleanCmdTrue) }}
        run: echo "boolean cmd true"
      - if: ${{ fromJSON(needs.test_outputs.outputs.booleanCmdFalse) }}
        run: echo "boolean cmd false"
    outputs:
      amazingString: ${{ needs.test_outputs.outputs.amazingString }}
      stringTrue: ${{ needs.test_outputs.outputs.stringTrue }}
      stringFalse: ${{ needs.test_outputs.outputs.stringFalse }}
      booleanTrue: ${{ needs.test_outputs.outputs.booleanTrue }}
      booleanFalse: ${{ needs.test_outputs.outputs.booleanFalse }}
